openapi: 3.0.2
info:
  title: Tenta's API
  description: |
    Tenta is a remote and real-time management system for distributed sensor networks. It allows you to collect and store data from your sensors, and supervise and configure them remotely from anywhere in the world.

    This documentation describes Tenta's REST API. In most cases, you won't need to call these endpoints directly, as the dashboard provides a user-friendly interface. However, you might use this API to integrate Tenta with your own systems or to automate certain tasks.
  version: "0.1"
servers:
  - url: "https://sea-turtle-app-38sco.ondigitalocean.app"
tags:
  - name: Status
  - name: Users
  - name: Networks
  - name: Sensors
paths:
  "/status":
    get:
      tags: [Status]
      summary: Read server status
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment:
                    type: string
                    example: production
                  commit_sha:
                    type: string
                    example: 1a2984bf5ffda71207fb133d785eb486cb465618
                  branch_name:
                    type: string
                    example: main
                  start_timestamp:
                    $ref: "#/components/schemas/timestamp"
        "400":
          $ref: "#/components/responses/400"
  "/users":
    post:
      tags: [Users]
      summary: Create user
      description: |
        Creates a new user from a username and password. Immediately returns a valid access token for that user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - user_name
                - password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "400":
          $ref: "#/components/responses/400"
        "409":
          $ref: "#/components/responses/409"
  "/authentication":
    post:
      tags: [Users]
      summary: Authenticate
      description: |
        Authenticates a user from a username and password and return an access token. Use this access token in all requests to protected routes.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
              required:
                - user_name
                - password
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  "/networks":
    post:
      tags: [Networks]
      summary: Create network
      description: |
        Creates a new network with the given name. The user automatically becomes a member of the network.
      security:
        - "Bearer token": []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                network_name:
                  $ref: "#/components/schemas/name"
              required:
                - network_name
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  network_identifier:
                    $ref: "#/components/schemas/identifier"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags: [Networks]
      summary: Read networks
      description: |
        Returns a list of all networks the user is a member of.
      security:
        - "Bearer token": []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    network_identifier:
                      $ref: "#/components/schemas/identifier"
                    network_name:
                      $ref: "#/components/schemas/name"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
  "/networks/{network_identifier}/sensors":
    post:
      tags: [Networks]
      summary: Create sensor
      description: |
        Creates a new sensor with the given name in the given network.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
              required:
                - sensor_name
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensor_identifier:
                    $ref: "#/components/schemas/identifier"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
    get:
      tags: [Networks]
      summary: Read sensors
      description: |
        Returns a list of all sensors in the given network.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sensor_identifier:
                      $ref: "#/components/schemas/identifier"
                    sensor_name:
                      $ref: "#/components/schemas/name"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
  "/networks/{network_identifier}/sensors/{sensor_identifier}":
    put:
      tags: [Networks]
      summary: Update sensor
      description: |
        Updates the metadata of the given sensor.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
              required:
                - sensor_name
      responses:
        "200":
          description: OK
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "409":
          $ref: "#/components/responses/409"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/configurations":
    post:
      tags: [Sensors]
      summary: Create configuration
      description: |
        Creates or updates a sensor's configuration. Each configuration is assigned a monotonically increasing `revision` number. The new configuration is stored in the database and relayed to the sensor over MQTT.

        Configurations are an optional feature. Sensors don't need to implement configuration updates and can nevertheless send measurements and logs unidirectionally to the server.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/configuration"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  revision:
                    $ref: "#/components/schemas/revision"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
    get:
      tags: [Sensors]
      summary: Read configurations
      description: |
        Returns a sensor's configurations in pages of 64 elements sorted ascendingly by `revision`.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/revision"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    publication_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    acknowledgment_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    receipt_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    revision:
                      $ref: "#/components/schemas/revision"
                    value:
                      $ref: "#/components/schemas/configuration"
                    success:
                      type: boolean
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/measurements":
    get:
      tags: [Sensors]
      summary: Read measurements
      description: |
        By default, returns a sensor's most recent 64 measurements sorted ascendingly by `creation_timestamp`. You can use the `creation_timestamp` and `direction` parameters to page through the collection.

        If `aggregate` is set to `true`, other query parameters are ignored and the request returns an aggregation of the sensor's measurements over the last 4 weeks.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
        - $ref: "#/components/parameters/aggregate"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - title: "Measurements"
                    type: array
                    items:
                      type: object
                      properties:
                        creation_timestamp:
                          $ref: "#/components/schemas/timestamp"
                        revision:
                          $ref: "#/components/schemas/revision"
                        value:
                          $ref: "#/components/schemas/measurement"
                  - title: "Aggregation"
                    description: "Note that the result contains averages only for periods with at least one measurement."
                    type: object
                    additionalProperties:
                      type: array
                      items:
                        type: object
                        properties:
                          bucket_timestamp:
                            $ref: "#/components/schemas/timestamp"
                          average:
                            $ref: "#/components/schemas/value"
                    example:
                      temperature:
                        - bucket_timestamp: 1683644400.0
                          average: 23.1
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs":
    get:
      tags: [Sensors]
      summary: Read logs
      description: |
        Returns a sensor's logs in pages of 64 elements sorted ascendingly by `creation_timestamp`.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    revision:
                      $ref: "#/components/schemas/revision"
                    severity:
                      $ref: "#/components/schemas/severity"
                    message:
                      $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs/aggregates":
    get:
      tags: [Sensors]
      summary: Read logs aggregation
      description: |
        Returns an aggregation of a sensor's logs that have a severity of warning or error.
      security:
        - "Bearer token": []
      parameters:
        - $ref: "#/components/parameters/network_identifier"
        - $ref: "#/components/parameters/sensor_identifier"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    min_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    max_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    min_revision:
                      $ref: "#/components/schemas/revision"
                    max_revision:
                      $ref: "#/components/schemas/revision"
                    severity:
                      $ref: "#/components/schemas/severity"
                    message:
                      $ref: "#/components/schemas/message"
                    count:
                      $ref: "#/components/schemas/count"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
components:
  securitySchemes:
    "Bearer token":
      type: http
      scheme: bearer
  responses:
    400:
      description: Bad Request
    401:
      description: Unauthorized
    403:
      description: Forbidden
    404:
      description: Not Found
    409:
      description: Conflict
  schemas:
    identifier:
      type: string
      example: 575a7328-4e2e-4b88-afcc-e0b5ed3920cc
      pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$"
    token:
      type: string
      example: c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^[0-9a-f]{64}$"
    timestamp:
      type: number
      example: 1683644400.0
    name:
      description: "The regex means: lowercase letters and numbers, separated by dashes, with no leading, trailing, or double dashes."
      type: string
      example: happy-un1c0rn
      pattern: "^[a-z0-9](-?[a-z0-9])*$"
      maxLength: 64
    password:
      type: string
      example: "12345678"
      minLength: 8
      maxLength: 256
    configuration:
      description: "Configurations are JSON objects that are relayed to the sensors over MQTT. Sensors are expected to validate the configurations they receive and respond with positive or negative acknowledgments."
      type: object
      additionalProperties: true
      example:
        measurement_interval: 8.5
        cache: true
        strategy: "default"
    revision:
      description: "Configurations are assigned monotonically increasing revision numbers. The revision is used as an identifier in the communication with the sensors and can clearly match configurations to measurements and logs."
      type: integer
    measurement:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/value"
      example:
        temperature: 23.1
        humidity: 0.62
    attribute:
      type: string
      example: temperature
    value:
      type: number
      example: 23.1
    severity:
      type: string
      enum: [info, warning, error]
      example: warning
    message:
      type: string
      example: "The CPU is toasty; Get the marshmallows ready!"
    count:
      type: integer
      minimum: 0
    authorization:
      type: string
      example: Bearer c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^Bearer [0-9a-f]{64}$"
  parameters:
    network_identifier:
      name: network_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    sensor_identifier:
      name: sensor_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    revision:
      name: revision
      description: "The cursor of the query. Depending on the direction, the request returns the next or previous elements. The element the cursor references is not included in the result."
      in: query
      schema:
        $ref: "#/components/schemas/revision"
    creation_timestamp:
      name: creation_timestamp
      description: "The cursor of the query. Depending on the direction, the request returns the next or previous elements. The element the cursor references is not included in the result."
      in: query
      schema:
        $ref: "#/components/schemas/timestamp"
    direction:
      name: direction
      description: "The direction of the page based on the cursor. If no cursor is provided, `next` returns the first page and `previous` returns the last page."
      in: query
      schema:
        type: string
        enum: [next, previous]
        default: next
    aggregate:
      name: aggregate
      description: "Whether to aggregate the measurements. If `true`, ignores other query parameters and returns the 1-hour averages over the last 4 weeks for each available attribute."
      in: query
      schema:
        type: boolean
        default: false
