openapi: 3.0.2
info:
  title: Hermes
  version: "0.1"
servers:
  - url: "https://sea-turtle-app-38sco.ondigitalocean.app"
paths:
  "/status":
    get:
      tags: [Status]
      summary: Read the server's status
      description: Read the status of the server.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  environment:
                    type: string
                    example: production
                  commit_sha:
                    type: string
                    example: 1a2984bf5ffda71207fb133d785eb486cb465618
                  branch_name:
                    type: string
                    example: main
                  start_timestamp:
                    $ref: "#/components/schemas/timestamp"
  "/users":
    post:
      tags: [Users]
      summary: Create user
      description: Create a new user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "409":
          description: Conflict
  "/authentication":
    post:
      tags: [Users]
      summary: Create authentication
      description: Log in.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  $ref: "#/components/schemas/name"
                password:
                  $ref: "#/components/schemas/password"
          application/xml:
            schema:
              type: object
              properties: {}
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    $ref: "#/components/schemas/token"
                  user_identifier:
                    $ref: "#/components/schemas/identifier"
        "401":
          description: Unauthorized
        "404":
          description: Not Found
  "/networks/{network_identifier}":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
    get:
      tags: [Networks]
      summary: Read network
      description: Read information about the network and its sensors.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    sensor_identifier:
                      $ref: "#/components/schemas/identifier"
                    sensor_name:
                      $ref: "#/components/schemas/name"
                    bucket_timestamps:
                      type: array
                      items:
                        $ref: "#/components/schemas/timestamp"
                    measurement_counts:
                      type: array
                      items:
                        type: integer
  "/networks/{network_identifier}/sensors":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
    post:
      tags: [Sensors]
      summary: Create sensor
      description: Create a new sensor.
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
                configuration:
                  type: object
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensor_identifier:
                    $ref: "#/components/schemas/identifier"
                  revision:
                    $ref: "#/components/schemas/revision"
        "404":
          description: Not Found
  "/networks/{network_identifier}/sensors/{sensor_identifier}":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
      - $ref: "#/components/parameters/sensor_identifier"
    put:
      tags: [Sensors]
      summary: Update sensor
      description: Update the sensor's information and configuration.
      parameters:
        - $ref: "#/components/parameters/authorization"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                sensor_name:
                  $ref: "#/components/schemas/name"
                configuration:
                  type: object
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  sensor_identifier:
                    $ref: "#/components/schemas/identifier"
                  revision:
                    $ref: "#/components/schemas/revision"
        "404":
          description: Not Found
  "/networks/{network_identifier}/sensors/{sensor_identifier}/configurations":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
      - $ref: "#/components/parameters/sensor_identifier"
    get:
      tags: [Sensors]
      summary: Page through a sensor's configurations
      description: "Read the configurations of a sensor in pages."
      parameters:
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/revision"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: object
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    publication_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    acknowledgement_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    receipt_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    success:
                      type: boolean
  "/networks/{network_identifier}/sensors/{sensor_identifier}/measurements":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
      - $ref: "#/components/parameters/sensor_identifier"
    get:
      tags: [Measurements]
      summary: Page through a sensor's measurements
      description: Read the measurements of a sensor in pages.
      parameters:
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: object
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
      - $ref: "#/components/parameters/sensor_identifier"
    get:
      tags: [Logs]
      summary: Page through a sensor's logs
      description: Read the logs of a sensor in pages.
      parameters:
        - $ref: "#/components/parameters/direction"
        - $ref: "#/components/parameters/creation_timestamp"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    severity:
                      $ref: "#/components/schemas/severity"
                    subject:
                      type: string
                    revision:
                      $ref: "#/components/schemas/revision"
                    creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    details:
                      type: string
  "/networks/{network_identifier}/sensors/{sensor_identifier}/logs/aggregates":
    parameters:
      - $ref: "#/components/parameters/network_identifier"
      - $ref: "#/components/parameters/sensor_identifier"
    get:
      tags: [Logs]
      summary: Read logs aggregation
      description: Read an aggregation of sensor logs with warning and error severity.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    severity:
                      $ref: "#/components/schemas/severity"
                    subject:
                      type: string
                    min_revision:
                      $ref: "#/components/schemas/revision"
                    max_revision:
                      $ref: "#/components/schemas/revision"
                    min_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    max_creation_timestamp:
                      $ref: "#/components/schemas/timestamp"
                    count:
                      $ref: "#/components/schemas/count"
components:
  schemas:
    identifier:
      type: string
      example: 575a7328-4e2e-4b88-afcc-e0b5ed3920cc
      pattern: "^[a-f0-9]{8}-[a-f0-9]{4}-4[a-f0-9]{3}-[89ab][a-f0-9]{3}-[a-f0-9]{12}$"
    timestamp:
      type: number
      example: 1683644500.3
    name:
      type: string
      example: example
      pattern: "^(?!-)(?!.*--)[a-z0-9-]{1,64}(?<!-)$"
    password:
      type: string
      example: "12345678"
      minLength: 8
      maxLength: 256
    token:
      type: string
      example: c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^[0-9a-f]{64}$"
    revision:
      type: integer
    severity:
      type: string
      enum: [info, warning, error]
    count:
      type: integer
      minimum: 0
    authorization:
      type: string
      example: Bearer c59805ae394cceea937163877ca31375183650586137170a69652b6d8543e869
      pattern: "^Bearer [0-9a-f]{64}$"
  parameters:
    network_identifier:
      name: network_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    sensor_identifier:
      name: sensor_identifier
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/identifier"
    revision:
      name: revision
      in: query
      schema:
        $ref: "#/components/schemas/revision"
    creation_timestamp:
      name: creation_timestamp
      in: query
      schema:
        $ref: "#/components/schemas/timestamp"
    direction:
      name: direction
      in: query
      schema:
        description: "The direction of the page based on the cursor. If no cursor is provided, `next` returns the first page and `previous` returns the last page."
        type: string
        enum: [next, previous]
        default: next
    authorization:
      name: authorization
      in: header
      required: true
      schema:
        $ref: "#/components/schemas/authorization"
